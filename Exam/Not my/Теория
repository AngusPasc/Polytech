11. Задача конструктора и механизм работы.
Задача: инициализация экземпляра объекта, подготовка позднего связывания виртуальных методов. Конструктор – это специальный метод, который инициализирует объект, содержащий виртуальные методы.
Основное назначение конструктора – установление связей с таблицей виртуальных методов – структурой, содержащей ссылки на виртуальные методы. Таким образом, конструктор инициализирует объект установкой связи между объектом и VMT с адресами кодов виртуальных методов. При инициализации и происходит позднее связывание.
6. Инкапсуляция. Примеры.
Инкапсуляция – объединение в одном типе полей данных и действий с ними.
Type
T1=object
	A1:integer;
	B1:char;
	Procedure p1(l:integer);
	Procedure p2(k:char);
End;
…
Procedure p1.t1(l:integer);
Begin
L:=L+3;
End;
Procedure p2.t1(k:char);
Begin
K:=’H’;
End;
Пример инкапсуляции. Целое поле объекта увеличивается на 3 при вызове его метода.

8. Сортировка файлов.
Внешняя сортировка.
Идея:
Разбиение файла на отрезки
Их распределение на два других в шахматном порядке
Формирование из двух отрезков одного, чтение их из двух файлов и запись последовательности новых отрезков в исходный.
Отрезок – правильно расположенные ключи.

17. Полиморфизм. Вызов метода предка из потомка.
Program predokpotomok
Type
t1=object
Function f1:string;
End;
t2 = object (t1)
function f1:string;
procedure p2(a1:string);
end;
function t1.f1:string;
begin
f1:=’+++’;
end;
function t2.f1:string;
	begin
	f1:=’***’;
	end;
procedure t2.p2(a1:string);
	begin
	a1:=inherited f1; {вызов ближайшего предка}
	writeln(‘a1=’, a1); {вывод предка из потомка}
	writeln(‘a1=’ f1); {Вызов своего метода}
	end;
var
o1:t1;
o2:t2;
l:string;
begin
o2.f1;{запуск метода потомка}
o2.p2(l); {запуск предка из потомка, затем запуск метода потомка}
writeln(‘o1.f1=’, o1.f1); {запуск метода предка}
end.
18. Полиморфизм. Простое переопределение методов.
Program elempereopredelen;
Type
T1= object
A:integer;
Procedure p1
Function f1(a1:string):string;
End;
T2= object(t1);
Function f1:string; {Переопределенная функция}
End;
Function t1.f1;
Begin
F1:=a1;
End;
Procedure t1.p1;
	Begin
	Writeln(f1(‘===’));
	End;
Function t2.f1:string {переопределенная предком функция}
	Begin
	F1:=’function t2.f1’
	End;
Var
O1:t1;
O2:t2;
L:string;
Begin
O1.p1;
O2.p1;
L:=o1.f1(‘kkk’); {функция предка}
Writeln(‘l=’, l);
L:=o2.f1; {вызывается f1 потомка}
Writeln(‘l=’, l);
End.
На экране:
= = =
 = = =
 s=kkk
s=function t2.f1

19. Раннее и позднее связывание.
Program svyaz;
Type
T1=object
	A1:string;
	Procedure p1;
	Function f1: string; virtual;
	Constructor Init;
End;
T2= object
	A2:string;
	Function f1:string;virtual;
	Constructor init;
End;
Procedure t1.p1;
Begin
	Writeln(f1);
	End;
Function t1.f1: string;
	Begin
	F1:=’===’;
	A1:=’ttt’;
	Writeln(‘a1=’, a1);
	End;
Constructor t1.Init;
Begin
End;
Function t2.f1:string;
	Begin
	F1:=’---’;
	A1:=’***’;
	A2:=’!!!’;
	End;
Constructor t2.Init;
Begin
End;
Var
O1:t1;{Предок}
O2:t2;{Потомок}
O1.init;
O2.init;
O1.p1;
O2.p1;
Writeln(o2.f1, ‘’, o1,f1);
End.
